# maev.si
# https://maev.si/
# maevsi
# https://github.com/maevsi/maevsi/
---
configs:
  postgraphile_public-key:
  # The GraphQL API's JWT public key file.
    file: ./configurations/postgraphile/jwtRS256.key.pub
  postgraphile_rc:
  # The GraphQL API's configuration file.
    file: ../production/configurations/postgraphile/.postgraphilerc.js
secrets:
  jobber_aliases:
  # The job scheduler's SMTP client mail alias.
    file: ./secrets/jobber/aliases.secret
  jobber_aws-credentials:
  # The job scheduler's AWS credentials.
    file: ./secrets/jobber/aws-credentials.secret
  jobber_msmtprc:
  # The job scheduler's SMTP client configuration.
    file: ./secrets/jobber/msmtprc.secret
  maevsi_sqitch-target:
  # The database change management application's database connection string.
    file: ./secrets/maevsi/sqitch-target.secret
  pg-amqp-bridge_amqp-uri:
  # The database-to-AMQP bridge's AMQP URI.
    file: ./secrets/pg-amqp-bridge/amqp-uri.secret
  pg-amqp-bridge_postgresql-uri:
  # The database-to-AMQP bridge's database URI.
    file: ./secrets/pg-amqp-bridge/postgresql-uri.secret
  portainer_admin-password:
  # The container manager's admin password.
    file: ./secrets/portainer/admin-password.secret
  postgraphile_connection:
  # The GraphQL API's database URI.
    file: ./secrets/postgraphile/connection.secret
  postgraphile_jwt-secret:
  # The GraphQL API's JWT secret.
    file: ./secrets/postgraphile/jwt-secret.secret
  postgraphile_owner-connection:
  # The GraphQL API's database owner URI.
    file: ./secrets/postgraphile/owner-connection.secret
  postgres_db:
  # The database's name.
    file: ./secrets/postgres/db.secret
  postgres_password:
  # The database's password.
    file: ./secrets/postgres/password.secret
  postgres_role_maevsi-postgraphile_password:
  # The `maevsi_postgraphile` database role's password.
    file: ./secrets/postgres/role_maevsi-postgraphile_password.secret
  postgres_role_maevsi-stomper_password:
  # The `stomper` database role's password.
    file: ./secrets/postgres/role_maevsi-stomper_password.secret
  postgres_role_maevsi-tusd_password:
  # The `tusd` database role's password.
    file: ./secrets/postgres/role_maevsi-tusd_password.secret
  postgres_user:
  # The database's default user.
    file: ./secrets/postgres/user.secret
  rabbitmq_definitions:
  # The message queue's configuration.
    file: ./secrets/rabbitmq/definitions.json.secret
  stomper_nodemailer-transporter:
  # The email service's SMTP configuration.
    file: ./secrets/stomper/nodemailer-transporter.secret
  tusd_aws:
  # The upload service's s3 credentials file.
    file: ./secrets/tusd/aws.secret
services:
  adminer:
  # You can access the database's frontend at [adminer.maevsi.test](https://adminer.maevsi.test/).
  # This information is required for login:
  #
  # |          |                     |
  # | -------- | ------------------- |
  # | System   | PostgreSQL          |
  # | Server   | postgres            |
  # | Username | [postgres_user]     |
  # | Password | [postgres_password] |
  # | Database | [postgres_db]       |
  #
  # Values in square brackets are [Docker secrets](https://docs.docker.com/engine/swarm/secrets/).
    deploy:
      labels:
      - traefik.enable=true
      - traefik.http.routers.adminer.middlewares=redirectscheme
      - traefik.http.routers.adminer.rule=Host(`adminer.${STACK_DOMAIN}`)
      - traefik.http.routers.adminer_secure.rule=Host(`adminer.${STACK_DOMAIN}`)
      - traefik.http.routers.adminer_secure.tls.options=mintls13@file #DARGSTACK-REMOVE
      - traefik.http.services.adminer.loadbalancer.server.port=8080
    image: adminer:4.8.1-standalone@sha256:7a9d559392b9fc144aabf3059369f31adf5008b965127f3ba40689b6739ce2b2
    volumes:
    - ../production/configurations/adminer/adminer.css:/var/www/html/adminer.css:ro
  jobber:
  # You cannot access the jobber via a web interface.
    environment:
      AWS_SHARED_CREDENTIALS_FILE: /run/secrets/jobber_aws-credentials
    image: dargmuesli/jobber-aws-msmtp:1.2.5@sha256:71019d2f58a0ecc5d8b5f78865c00acf23b3243bf8fc7792fcb7f18e5a42744e
    secrets:
    - source: jobber_aliases
      target: /etc/aliases
    - jobber_aws-credentials
    - source: jobber_msmtprc
      target: /etc/msmtprc
    volumes:
      - ../production/backups/postgres/:/backups/
      - ../development/configurations/jobber/aws-config:/home/jobberuser/.aws/config:ro #DARGSTACK-REMOVE
      - ../production/configurations/jobber/.jobber:/home/jobberuser/.jobber:ro
  maevsi:
  # You can access the main project at [maevsi.test](https://maevsi.test/).
    configs:
      - source: postgraphile_public-key
        target: /run/config/postgraphile_jwt-public-key
    deploy:
      labels:
      - traefik.enable=true
      - traefik.http.routers.maevsi.entryPoints=web
      - traefik.http.routers.maevsi.middlewares=redirectscheme
      - traefik.http.routers.maevsi.rule=Host(`${STACK_DOMAIN}`, `alpha.${STACK_DOMAIN}`, `www.${STACK_DOMAIN}`)
      - traefik.http.routers.maevsi.service=maevsi
      - traefik.http.services.maevsi.loadbalancer.server.port=3000
      - traefik.tcp.routers.maevsi_secure.entryPoints=web-secure
      - traefik.tcp.routers.maevsi_secure.rule=HostSNI(`${STACK_DOMAIN}`, `alpha.${STACK_DOMAIN}`, `www.${STACK_DOMAIN}`)
      - traefik.tcp.routers.maevsi_secure.tls.passthrough=true #DARGSTACK-REMOVE
      - traefik.tcp.routers.maevsi_secure.service=maevsi_secure
      - traefik.tcp.services.maevsi_secure.loadbalancer.server.port=3000
      - traefik.tcp.routers.maevsi_secure_nuxt.entryPoints=nuxt
      - traefik.tcp.routers.maevsi_secure_nuxt.rule=HostSNI(`${STACK_DOMAIN}`, `alpha.${STACK_DOMAIN}`, `www.${STACK_DOMAIN}`)
      - traefik.tcp.routers.maevsi_secure_nuxt.tls.passthrough=true #DARGSTACK-REMOVE
      - traefik.tcp.routers.maevsi_secure_nuxt.service=maevsi_secure_nuxt
      - traefik.tcp.services.maevsi_secure_nuxt.loadbalancer.server.port=24678
    environment:
      CONSOLA_LEVEL: 4 # debug
      GOOGLE_ADSENSE_ID: ${GOOGLE_ADSENSE_ID}
      GOOGLE_ANALYTICS_DOMAIN: ${GOOGLE_ANALYTICS_DOMAIN}
      GOOGLE_ANALYTICS_ID: ${GOOGLE_ANALYTICS_ID}
      NUXT_PUBLIC_STACK_DOMAIN: ${STACK_DOMAIN} # Must be prefixed by "NUXT_PUBLIC_" (https://nuxtjs.org/api/configuration-env/#automatic-injection-of-environment-variables)
      POSTGRAPHILE_JWT_PUBLIC_KEY_FILE: /run/config/postgraphile_jwt-public-key
      POSTGRES_DB_FILE: /run/secrets/postgres_db
      POSTGRES_ROLE_MAEVSI_TUSD_PASSWORD_FILE: /run/secrets/postgres_role_maevsi-tusd_password
    image: maevsi/maevsi:dev
    secrets:
    - maevsi_sqitch-target
    - postgres_db
    - postgres_role_maevsi-postgraphile_password
    - postgres_role_maevsi-stomper_password
    - postgres_role_maevsi-tusd_password
    user: node:node
    volumes:
    - ${PNPM_STORE_DIR}:/srv/.pnpm-store/
    - ./certificates/:/srv/certificates/
    - ../../../maevsi/nuxt/:/srv/app/
    - ../../../maevsi/sqitch/:/srv/sqitch/
  minio: #DARGSTACK-REMOVE
  # You can access the s3 console at [minio.maevsi.test](https://minio.maevsi.test/).
  # You can access the s3 api service at [s3.maevsi.test](https://s3.maevsi.test/) if you want to access via cli from outside the stack.
    entrypoint: /patched-entrypoint.sh #DARGSTACK-REMOVE
    command: server /data --console-address ":9001" #DARGSTACK-REMOVE
    deploy: #DARGSTACK-REMOVE
      labels: #DARGSTACK-REMOVE
        - traefik.enable=true #DARGSTACK-REMOVE
        # Minio Console
        - traefik.http.routers.minio.middlewares=redirectscheme #DARGSTACK-REMOVE
        - traefik.http.routers.minio.rule=Host(`minio.${STACK_DOMAIN}`) #DARGSTACK-REMOVE
        - traefik.http.routers.minio.service=minio #DARGSTACK-REMOVE
        - traefik.http.routers.minio_secure.rule=Host(`minio.${STACK_DOMAIN}`) #DARGSTACK-REMOVE
        - traefik.http.routers.minio_secure.tls.options=mintls13@file #DARGSTACK-REMOVE
        - traefik.http.routers.minio_secure.service=minio #DARGSTACK-REMOVE
        - traefik.http.services.minio.loadbalancer.server.port=9001 #DARGSTACK-REMOVE
        - traefik.http.services.minio.loadbalancer.passhostheader=true #DARGSTACK-REMOVE
        # Minio itself
        - traefik.http.routers.s3.middlewares=redirectscheme #DARGSTACK-REMOVE
        - traefik.http.routers.s3.rule=Host(`s3.${STACK_DOMAIN}`) #DARGSTACK-REMOVE
        - traefik.http.routers.s3.service=s3 #DARGSTACK-REMOVE
        - traefik.http.routers.s3_secure.rule=Host(`s3.${STACK_DOMAIN}`) #DARGSTACK-REMOVE
        - traefik.http.routers.s3_secure.tls.options=mintls13@file #DARGSTACK-REMOVE
        - traefik.http.routers.s3_secure.service=s3 #DARGSTACK-REMOVE
        - traefik.http.services.s3.loadbalancer.server.port=9000 #DARGSTACK-REMOVE
        - traefik.http.services.s3.loadbalancer.passhostheader=true #DARGSTACK-REMOVE
    image: minio/minio@sha256:6a2ae4f9950eb66e213c80c0b1ccdc6d7ae196ade98a32abf435c00a2c9c1cb3 #DARGSTACK-REMOVE
    volumes: #DARGSTACK-REMOVE
      - minio_data:/data #DARGSTACK-REMOVE
      - ./configurations/minio/entrypoint.sh:/patched-entrypoint.sh #DARGSTACK-REMOVE
    environment: #DARGSTACK-REMOVE
      MINIO_ROOT_PASSWORD: s3password #DARGSTACK-REMOVE
      MINIO_ROOT_USER: s3user #DARGSTACK-REMOVE
  pg-amqp-bridge:
  # You cannot access the database-to-AMQP bridge directly.
    environment:
      AMQP_URI_FILE: /run/secrets/pg-amqp-bridge_amqp-uri
      BRIDGE_CHANNELS: account_password_reset_request:account_password_reset_request,account_registration:account_registration,event_invitation:event_invitation
      DELIVERY_MODE: PERSISTENT
      POSTGRESQL_URI_FILE: /run/secrets/pg-amqp-bridge_postgresql-uri
      RUST_LOG: info
    image: dargmuesli/pg-amqp-bridge:0.0.8@sha256:11332841c98058fa7b362fe74dc47854132f42776e8f7c95381c656671f58fb0
    secrets:
    - pg-amqp-bridge_amqp-uri
    - pg-amqp-bridge_postgresql-uri
  portainer:
  # You can access the container manager's frontend at [portainer.maevsi.test](https://portainer.maevsi.test/).
    command: -H tcp://tasks.portainer-agent:9001 --tlsskipverify --admin-password-file '/run/secrets/portainer_admin-password'
    deploy:
      labels:
      - traefik.enable=true
      - traefik.http.routers.portainer.middlewares=redirectscheme
      - traefik.http.routers.portainer.rule=Host(`portainer.${STACK_DOMAIN}`)
      - traefik.http.routers.portainer_secure.rule=Host(`portainer.${STACK_DOMAIN}`)
      - traefik.http.routers.portainer_secure.tls.options=mintls13@file #DARGSTACK-REMOVE
      - traefik.http.services.portainer.loadbalancer.server.port=9000
      mode: replicated
      placement:
        constraints:
        - node.role == manager
      replicas: 1
    image: portainer/portainer-ce:2.15.1-alpine@sha256:a20d75f6943aa76f9af502ed6f0c0b404dfbe9a06d2c1d3e8b090daf8f3d2911
    secrets:
    - portainer_admin-password
    volumes:
    - portainer_data:/data
  portainer-agent:
  # You cannot access the container manager's agent directly.
    deploy:
      mode: global
      placement:
        constraints:
        - node.platform.os == linux
    environment:
      AGENT_CLUSTER_ADDR: tasks.portainer-agent
    image: portainer/agent:2.15.1@sha256:814047c70f52827a084b0dfe7660940414a06a89eae4ad76dbbf4faf139f61d0
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock
    - /var/lib/docker/volumes:/var/lib/docker/volumes
  postgraphile:
  # You can access the GraphQL API for the PostgreSQL database at [postgraphile.maevsi.test](https://postgraphile.maevsi.test/).
    configs:
      - source: postgraphile_public-key
        target: /run/config/postgraphile_jwt-public-key
      - source: postgraphile_rc
        target: /postgraphile/.postgraphilerc.js
    deploy:
      labels:
      - traefik.enable=true
      - traefik.http.routers.postgraphile.middlewares=redirectscheme
      - traefik.http.routers.postgraphile.rule=Host(`postgraphile.${STACK_DOMAIN}`)
      - traefik.http.routers.postgraphile_secure.middlewares=header_cors
      - traefik.http.routers.postgraphile_secure.rule=Host(`postgraphile.${STACK_DOMAIN}`)
      - traefik.http.routers.postgraphile_secure.tls.options=mintls13@file #DARGSTACK-REMOVE
      - traefik.http.services.postgraphile.loadbalancer.server.port=5000
    environment:
      POSTGRAPHILE_CONNECTION_FILE: /run/secrets/postgraphile_connection
      POSTGRAPHILE_JWT_PUBLIC_KEY_FILE: /run/config/postgraphile_jwt-public-key
      POSTGRAPHILE_JWT_SECRET_KEY_FILE: /run/secrets/postgraphile_jwt-secret
      POSTGRAPHILE_OWNER_CONNECTION_FILE: /run/secrets/postgraphile_owner-connection
    image: graphile/postgraphile:4.12.11@sha256:038ae2c2d0b907ea01e7db499c3acb7c2c9339d55fc357bc380f21b7cba27c6e
    secrets:
    - postgraphile_connection
    - postgraphile_jwt-secret
    - postgraphile_owner-connection
  postgres:
  # You can access the database via `adminer`.
    command: -c maevsi.jwt_expiry_duration='1 month'
    environment:
      POSTGRES_DB_FILE: /run/secrets/postgres_db
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_USER_FILE: /run/secrets/postgres_user
    image: postgres:15.0-alpine@sha256:162ece254c2ed16362999971340ab523bd8e085c5175b3aff91201ebd32f21bd
    secrets:
    - postgres_db
    - postgres_password
    - postgres_user
    sysctls:
      # Prevent Docker Swarm from killing pg-amqp-bridge connections (https://github.com/moby/moby/issues/31208)
      - net.ipv4.tcp_keepalive_time=600
      - net.ipv4.tcp_keepalive_intvl=30
      - net.ipv4.tcp_keepalive_probes=10
    volumes:
    - /run/:/run/ # Make PGSQL socket available. # #DARGSTACK-REMOVE
    - postgres_data:/var/lib/postgresql/data
  rabbitmq:
  # You can access the message queue at [rabbitmq.maevsi.test](https://rabbitmq.maevsi.test/).
    deploy:
      labels:
      - traefik.enable=true
      - traefik.http.routers.rabbitmq.middlewares=redirectscheme
      - traefik.http.routers.rabbitmq.rule=Host(`rabbitmq.${STACK_DOMAIN}`)
      - traefik.http.routers.rabbitmq_secure.rule=Host(`rabbitmq.${STACK_DOMAIN}`)
      - traefik.http.routers.rabbitmq_secure.tls.options=mintls13@file #DARGSTACK-REMOVE
      - traefik.http.services.rabbitmq.loadbalancer.server.port=15672
    image: rabbitmq:3.11.2-management-alpine@sha256:79de6f4285ff3a281cef9c4c42b04afaf5e25affab8a465f6bde16db34bfefc7
    secrets:
    - source: rabbitmq_definitions
      target: /etc/rabbitmq/definitions.json
    volumes:
    - ../production/configurations/rabbitmq/enabled_plugins:/etc/rabbitmq/enabled_plugins
    - ../production/configurations/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
    - rabbitmq_data:/var/lib/rabbitmq
  stomper:
  # You cannot access the email service directly.
    deploy:
      labels:
      - traefik.enable=true
      - traefik.http.routers.stomper.middlewares=redirectscheme
      - traefik.http.routers.stomper.rule=Host(`stomper.${STACK_DOMAIN}`)
      - traefik.http.routers.stomper_secure.rule=Host(`stomper.${STACK_DOMAIN}`)
      - traefik.http.routers.stomper_secure.tls.options=mintls13@file #DARGSTACK-REMOVE
      - traefik.http.services.stomper.loadbalancer.server.port=3000
    environment:
      CONSOLA_LEVEL: 4 # debug
      RABBITMQ_DEFINITIONS_FILE: /run/secrets/rabbitmq_definitions
      STACK_DOMAIN: ${STACK_DOMAIN}
    image: maevsi/stomper:dev
    # ports:
    # - 9229:9229
    secrets:
    - rabbitmq_definitions
    - postgres_db
    - postgres_role_maevsi-stomper_password
    - stomper_nodemailer-transporter
    user: 1000:1000
    volumes:
    - ../../../stomper/:/srv/app/
  traefik:
  # You can access the reverse proxy's dashboard at [traefik.maevsi.test](https://traefik.maevsi.test/).
    command:
    - --api=true
    - --entryPoints.web.address=:80
    - --entryPoints.web-secure.address=:443
    - --entryPoints.nuxt.address=:24678 #DARGSTACK-REMOVE
    - --providers.docker=true
    - --providers.docker.endpoint=unix:///var/run/docker.sock
    - --providers.docker.exposedByDefault=false
    - --providers.docker.swarmMode=true
    - --providers.file.filename=/dynamic.yml #DARGSTACK-REMOVE
    - --providers.file.watch=true #DARGSTACK-REMOVE
    - --log.level=DEBUG #DARGSTACK-REMOVE
    deploy:
      labels:
      - traefik.enable=true
      - traefik.http.middlewares.header_cors.headers.accessControlAllowHeaders=authorization,content-type
      - traefik.http.middlewares.header_cors.headers.accessControlAllowOriginList=*
      - traefik.http.middlewares.redirectregex_alpha.redirectregex.regex=^https?:\/\/(alpha|www)\.${STACK_DOMAIN}\/(.*)
      - traefik.http.middlewares.redirectregex_alpha.redirectregex.replacement=https://${STACK_DOMAIN}/$${2}
      - traefik.http.middlewares.redirectscheme.redirectscheme.scheme=https
      - traefik.http.routers.traefik.middlewares=redirectscheme
      - traefik.http.routers.traefik.rule=Host(`traefik.${STACK_DOMAIN}`)
      - traefik.http.routers.traefik_secure.rule=Host(`traefik.${STACK_DOMAIN}`)
      - traefik.http.routers.traefik_secure.service=api@internal
      - traefik.http.routers.traefik_secure.tls.options=mintls13@file #DARGSTACK-REMOVE
      - traefik.http.services.traefik.loadbalancer.server.port=8080
      mode: global
      placement:
        constraints:
        - node.role == manager
    image: traefik:v2.9.1@sha256:4ebf68cdb32ce65e8786ac83ece782ec0dbe583471c04dfd0af43f245b96c88f
    ports:
    - mode: host
      protocol: tcp
      published: 80
      target: 80
    - mode: host
      protocol: tcp
      published: 443
      target: 443
    - mode: host #DARGSTACK-REMOVE
      protocol: tcp #DARGSTACK-REMOVE
      published: 24678 #DARGSTACK-REMOVE
      target: 24678 #DARGSTACK-REMOVE
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock
    - ./certificates/:/etc/traefik/acme/
    - ./configurations/traefik/dynamic.yml:/dynamic.yml:ro #DARGSTACK-REMOVE
  tusd:
  # You can access the upload service at [tusd.maevsi.test](https://tusd.maevsi.test/).
    command: -behind-proxy --hooks-enabled-events pre-create,post-finish,post-terminate --hooks-http http://maevsi:3000/api/tusd -max-size ${TUSD_MAX_SIZE} -s3-bucket ${S3_TUSD_BUCKET} -s3-endpoint ${S3_TUSD_ENDPOINT}
    deploy:
      labels:
      - traefik.enable=true
      - traefik.http.routers.tusd.middlewares=redirectscheme
      - traefik.http.routers.tusd.rule=Host(`tusd.${STACK_DOMAIN}`)
      - traefik.http.routers.tusd_secure.rule=Host(`tusd.${STACK_DOMAIN}`) && Method(`GET`, `HEAD`, `OPTIONS`, `POST`, `PUT`, `PATCH`)
      - traefik.http.routers.tusd_secure.tls.options=mintls13@file #DARGSTACK-REMOVE
      - traefik.http.services.tusd.loadbalancer.server.port=1080
    environment:
      AWS_REGION: ${S3_TUSD_REGION}
    image: tusproject/tusd:v1.10.0@sha256:1e457b59fd5bbef888b2d04b701221e8300c4ce671f16cf5820e1d3e22872fe1
    secrets:
      - source: tusd_aws
        target: /home/tusd/.aws/credentials
version: "3.7"
volumes:
  minio_data: # DARGSTACK-REMOVE
  # The s3 server's data.
    {} # DARGSTACK-REMOVE
  portainer_data:
  # The container manager's data.
    {}
  postgres_data:
  # The database's data.
    {}
  rabbitmq_data:
  # The message queue's data.
    {}
