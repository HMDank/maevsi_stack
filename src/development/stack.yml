# maev.si
# https://maev.si/
# maevsi
# https://github.com/maevsi/maevsi/
---
configs:
  postgraphile_rc:
  # The GraphQL API's configuration file.
    file: ../production/configurations/postgraphile/.postgraphilerc.js
secrets:
  maevsi_sqitch-target:
  # The database change management application's database connection string.
    file: ./secrets/maevsi/sqitch-target.secret
  pg-amqp-bridge_amqp-uri:
  # The database-to-AMQP bridge's AMQP URI.
    file: ./secrets/pg-amqp-bridge/amqp-uri.secret
  pg-amqp-bridge_postgresql-uri:
  # The database-to-AMQP bridge's database URI.
    file: ./secrets/pg-amqp-bridge/postgresql-uri.secret
  portainer_admin-password:
  # The container manager's admin password.
    file: ./secrets/portainer/admin-password.secret
  postgraphile_connection:
  # The GraphQL API's database URI.
    file: ./secrets/postgraphile/connection.secret
  postgraphile_jwt-secret:
  # The GraphQL API's JWT secret.
    file: ./secrets/postgraphile/jwt-secret.secret
  postgraphile_owner-connection:
  # The GraphQL API's database owner URI.
    file: ./secrets/postgraphile/owner-connection.secret
  postgres_db:
  # The database's name.
    file: ./secrets/postgres/db.secret
  postgres_password:
  # The database's password.
    file: ./secrets/postgres/password.secret
  postgres_role_maevsi-postgraphile_password:
  # The `maevsi_postgraphile` database role's password.
    file: ./secrets/postgres/role_maevsi-postgraphile_password.secret
  postgres_role_maevsi-stomper_password:
  # The `stomper` database role's password.
    file: ./secrets/postgres/role_maevsi-stomper_password.secret
  postgres_role_maevsi-tusd_password:
  # The `tusd` database role's password.
    file: ./secrets/postgres/role_maevsi-tusd_password.secret
  postgres_user:
  # The database's default user.
    file: ./secrets/postgres/user.secret
  rabbitmq_password:
  # The message queue's login password.
    file: ./secrets/rabbitmq/password.secret
  rabbitmq_user:
  # The message queue's login username.
    file: ./secrets/rabbitmq/user.secret
  stomper_nodemailer-transporter:
  # The email service's SMTP configuration.
    file: ./secrets/stomper/nodemailer-transporter.secret
  tusd_aws:
  # The upload service's s3 credentials file.
    file: ./secrets/tusd/aws.secret
services:
  adminer:
  # You can access the database's frontend at [adminer.maevsi.test](https://adminer.maevsi.test/).
  # This information is required for login:
  #
  # |          |                     |
  # | -------- | ------------------- |
  # | System   | PostgreSQL          |
  # | Server   | postgres            |
  # | Username | [postgres_user]     |
  # | Password | [postgres_password] |
  # | Database | [postgres_db]       |
  #
  # Values in square brackets are [Docker secrets](https://docs.docker.com/engine/swarm/secrets/).
    deploy:
      labels:
      - traefik.enable=true
      - traefik.http.routers.adminer.middlewares=redirectscheme
      - traefik.http.routers.adminer.rule=Host(`adminer.${STACK_DOMAIN}`)
      - traefik.http.routers.adminer_secure.rule=Host(`adminer.${STACK_DOMAIN}`)
      - traefik.http.routers.adminer_secure.tls.options=mintls13@file #DARGSTACK-REMOVE
      - traefik.http.services.adminer.loadbalancer.server.port=8080
    image: adminer:4.8.0-standalone@sha256:1bf211fe728494901bba5461024fa8011182a97f8d5fbd121a19e58043e41e9e
    volumes:
    - ../production/configurations/adminer/adminer.css:/var/www/html/adminer.css:ro
  maevsi:
  # You can access the main project at [maevsi.test](https://maevsi.test/).
    deploy:
      labels:
      - traefik.enable=true
      - traefik.http.routers.maevsi.middlewares=redirectscheme,redirectregex_alpha
      - traefik.http.routers.maevsi.rule=Host(`${STACK_DOMAIN}`, `alpha.${STACK_DOMAIN}`, `www.${STACK_DOMAIN}`)
      - traefik.http.routers.maevsi_secure.middlewares=redirectregex_alpha
      - traefik.http.routers.maevsi_secure.rule=Host(`${STACK_DOMAIN}`, `alpha.${STACK_DOMAIN}`, `www.${STACK_DOMAIN}`)
      - traefik.http.routers.maevsi_secure.tls.options=mintls13@file #DARGSTACK-REMOVE
      - traefik.http.services.maevsi.loadbalancer.server.port=3000
    environment:
      CONSOLA_LEVEL: 4 # debug
      GOOGLE_ADSENSE_ID: ${GOOGLE_ADSENSE_ID}
      GOOGLE_ANALYTICS_DOMAIN: ${GOOGLE_ANALYTICS_DOMAIN}
      GOOGLE_ANALYTICS_ID: ${GOOGLE_ANALYTICS_ID}
      NUXT_ENV_STACK_DOMAIN: ${STACK_DOMAIN} # Must be prefixed by "NUXT_ENV_" (https://nuxtjs.org/api/configuration-env/#automatic-injection-of-environment-variables)
    image: maevsi/maevsi:dev
    secrets:
    - maevsi_sqitch-target
    - postgraphile_jwt-secret
    - postgres_db
    - postgres_role_maevsi-postgraphile_password
    - postgres_role_maevsi-stomper_password
    - postgres_role_maevsi-tusd_password
    user: node:node
    volumes:
    - ../../../maevsi/nuxt/:/srv/app/
    - ../../../maevsi/sqitch/:/srv/sqitch/
  pg-amqp-bridge:
  # You cannot access the database-to-AMQP bridge directly.
    environment:
      AMQP_URI_FILE: /run/secrets/pg-amqp-bridge_amqp-uri
      BRIDGE_CHANNELS: account_password_reset_request:account_password_reset_request,account_registration:account_registration,event_invitation:event_invitation
      DELIVERY_MODE: PERSISTENT
      POSTGRESQL_URI_FILE: /run/secrets/pg-amqp-bridge_postgresql-uri
      RUST_LOG: info
    image: subzerocloud/pg-amqp-bridge:0.0.8@sha256:9b3fee42443881b45dffbb687a29d9c59b1d76dffe2bb458046600fa0548ce75
    secrets:
    - pg-amqp-bridge_amqp-uri
    - pg-amqp-bridge_postgresql-uri
  portainer:
  # You can access the container manager's frontend at [portainer.maevsi.test](https://portainer.maevsi.test/).
    command: -H tcp://tasks.portainer-agent:9001 --tlsskipverify --admin-password-file '/run/secrets/portainer_admin-password'
    deploy:
      labels:
      - traefik.enable=true
      - traefik.http.routers.portainer.middlewares=redirectscheme
      - traefik.http.routers.portainer.rule=Host(`portainer.${STACK_DOMAIN}`)
      - traefik.http.routers.portainer_secure.rule=Host(`portainer.${STACK_DOMAIN}`)
      - traefik.http.routers.portainer_secure.tls.options=mintls13@file #DARGSTACK-REMOVE
      - traefik.http.services.portainer.loadbalancer.server.port=9000
      mode: replicated
      placement:
        constraints:
        - node.role == manager
      replicas: 1
    image: portainer/portainer:1.24.2@sha256:fb45b43738646048a0a0cc74fcee2865b69efde857e710126084ee5de9be0f3f
    secrets:
    - portainer_admin-password
    volumes:
    - portainer_data:/data
  portainer-agent:
  # You cannot access the container manager's agent directly.
    deploy:
      mode: global
      placement:
        constraints:
        - node.platform.os == linux
    environment:
      AGENT_CLUSTER_ADDR: tasks.portainer-agent
    image: portainer/agent:1.6.1@sha256:d74498147e8f421bb4af0db74b0f6bc81eb398de580a9fb1e7bc75bfc537462a
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock
    - /var/lib/docker/volumes:/var/lib/docker/volumes
  postgraphile:
  # You can access the GraphQL API for the PostgreSQL database at [postgraphile.maevsi.test](https://postgraphile.maevsi.test/).
    configs:
      - source: postgraphile_rc
        target: /postgraphile/.postgraphilerc.js
    deploy:
      labels:
      - traefik.enable=true
      - traefik.http.routers.postgraphile.middlewares=redirectscheme
      - traefik.http.routers.postgraphile.rule=Host(`postgraphile.${STACK_DOMAIN}`)
      - traefik.http.routers.postgraphile_secure.middlewares=header_cors
      - traefik.http.routers.postgraphile_secure.rule=Host(`postgraphile.${STACK_DOMAIN}`)
      - traefik.http.routers.postgraphile_secure.tls.options=mintls13@file #DARGSTACK-REMOVE
      - traefik.http.services.postgraphile.loadbalancer.server.port=5000
    image: graphile/postgraphile:v4.11.0@sha256:1a41e298fe71c13cdbeb603c6340c3deeef1a143ef3acb63646671c28b53457c
    secrets:
    - postgraphile_connection
    - postgraphile_jwt-secret
    - postgraphile_owner-connection
  postgres:
  # You can access the database via `adminer`.
    command: -c maevsi.jwt_expiry_duration='1 month'
    environment:
      POSTGRES_DB_FILE: /run/secrets/postgres_db
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_USER_FILE: /run/secrets/postgres_user
    image: postgres:13.2-alpine@sha256:8300df74166d6d51c470ecd6eb322dca252087c240d56e66923c2b4a1c61537f
    secrets:
    - postgres_db
    - postgres_password
    - postgres_user
    sysctls:
      # Prevent Docker Swarm from killing pg-amqp-bridge connections (https://github.com/moby/moby/issues/31208)
      - net.ipv4.tcp_keepalive_time=600
      - net.ipv4.tcp_keepalive_intvl=30
      - net.ipv4.tcp_keepalive_probes=10
    volumes:
    - /mnt/dev/postgresql/:/var/run/postgresql/ #DARGSTACK-REMOVE
    - postgres_data:/var/lib/postgresql/data
  rabbitmq:
  # You can access the message queue at [rabbitmq.maevsi.test](https://rabbitmq.maevsi.test/).
    command: /parallel_commands 'rabbitmq-server' 'rabbitmqctl --timeout 300 await_startup && rabbitmqctl import_definitions /definitions.json'
    deploy:
      labels:
      - traefik.enable=true
      - traefik.http.routers.rabbitmq.middlewares=redirectscheme
      - traefik.http.routers.rabbitmq.rule=Host(`rabbitmq.${STACK_DOMAIN}`)
      - traefik.http.routers.rabbitmq_secure.rule=Host(`rabbitmq.${STACK_DOMAIN}`)
      - traefik.http.routers.rabbitmq_secure.tls.options=mintls13@file #DARGSTACK-REMOVE
      - traefik.http.services.rabbitmq.loadbalancer.server.port=15672
    entrypoint: /entrypoint.sh
    environment:
      RABBITMQ_DEFAULT_PASS_FILE: /run/secrets/rabbitmq_password
      RABBITMQ_DEFAULT_USER_FILE: /run/secrets/rabbitmq_user
    image: rabbitmq:3.8.14-management-alpine@sha256:fb03ca411f8ccb831a7e726380db154f944210879005edbbdda038c95bbba001
    secrets:
    - rabbitmq_password
    - rabbitmq_user
    volumes:
    - ../production/configurations/rabbitmq/definitions.json:/etc/rabbitmq/definitions.json
    - ../production/configurations/rabbitmq/enabled_plugins:/etc/rabbitmq/enabled_plugins
    - ../production/configurations/rabbitmq/entrypoint.sh:/entrypoint.sh
    - ../production/configurations/rabbitmq/parallel_commands:/parallel_commands
    - rabbitmq_data:/var/lib/rabbitmq
  stomper:
  # You cannot access the email service directly.
    deploy:
      labels:
      - traefik.enable=true
      - traefik.http.routers.stomper.middlewares=redirectscheme
      - traefik.http.routers.stomper.rule=Host(`stomper.${STACK_DOMAIN}`)
      - traefik.http.routers.stomper_secure.rule=Host(`stomper.${STACK_DOMAIN}`)
      - traefik.http.routers.stomper_secure.tls.options=mintls13@file #DARGSTACK-REMOVE
      - traefik.http.services.stomper.loadbalancer.server.port=3000
    environment:
      CONSOLA_LEVEL: 4 # debug
      RABBITMQ_PASS_FILE: /run/secrets/rabbitmq_password
      RABBITMQ_USER_FILE: /run/secrets/rabbitmq_user
      STACK_DOMAIN: ${STACK_DOMAIN}
    image: maevsi/stomper:dev
    # ports:
    # - 9229:9229
    secrets:
    - rabbitmq_password
    - rabbitmq_user
    - postgres_db
    - postgres_role_maevsi-stomper_password
    - stomper_nodemailer-transporter
    user: 1000:1000
    volumes:
    - ../../../stomper/:/srv/app/
  traefik:
  # You can access the reverse proxy's dashboard at [traefik.maevsi.test](https://traefik.maevsi.test/).
    command:
    - --api=true
    - --entryPoints.web.address=:80
    - --entryPoints.web-secure.address=:443
    - --pilot.token=${TRAEFIK_PILOT_TOKEN}
    - --providers.docker=true
    - --providers.docker.endpoint=unix:///var/run/docker.sock
    - --providers.docker.exposedByDefault=false
    - --providers.docker.swarmMode=true
    - --providers.file.filename=/dynamic.yml #DARGSTACK-REMOVE
    - --providers.file.watch=true #DARGSTACK-REMOVE
    - --log.level=DEBUG #DARGSTACK-REMOVE
    deploy:
      labels:
      - traefik.enable=true
      - traefik.http.middlewares.header_cors.headers.accessControlAllowHeaders=authorization,content-type
      - traefik.http.middlewares.header_cors.headers.accessControlAllowOrigin=*
      - traefik.http.middlewares.redirectregex_alpha.redirectregex.regex=^https?:\/\/(www\.)?${STACK_DOMAIN}\/(.*)
      - traefik.http.middlewares.redirectregex_alpha.redirectregex.replacement=https://alpha.${STACK_DOMAIN}/$${2}
      - traefik.http.middlewares.redirectscheme.redirectscheme.scheme=https
      - traefik.http.routers.traefik.middlewares=redirectscheme
      - traefik.http.routers.traefik.rule=Host(`traefik.${STACK_DOMAIN}`)
      - traefik.http.routers.traefik_secure.rule=Host(`traefik.${STACK_DOMAIN}`)
      - traefik.http.routers.traefik_secure.service=api@internal
      - traefik.http.routers.traefik_secure.tls.options=mintls13@file #DARGSTACK-REMOVE
      - traefik.http.services.traefik.loadbalancer.server.port=8080
      mode: global
      placement:
        constraints:
        - node.role == manager
    image: traefik:v2.4.8@sha256:2781953cc6d6445ec49ac487bc7d94f512ac4e413ca73611be36d63ceda42751
    ports:
    - mode: host
      protocol: tcp
      published: 80
      target: 80
    - mode: host
      protocol: tcp
      published: 443
      target: 443
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock
    - ./certificates/:/etc/traefik/acme/
    - ./configurations/traefik/dynamic.yml:/dynamic.yml:ro #DARGSTACK-REMOVE
  tusd:
  # You can access the upload service at [tusd.maevsi.test](https://tusd.maevsi.test/).
    command: -behind-proxy --hooks-enabled-events pre-create,post-finish,post-terminate --hooks-http http://maevsi:3000/tusd -max-size ${TUSD_MAX_SIZE} -s3-bucket ${TUSD_S3_BUCKET} -s3-endpoint ${TUSD_S3_ENDPOINT}
    deploy:
      labels:
      - traefik.enable=true
      - traefik.http.routers.tusd.middlewares=redirectscheme
      - traefik.http.routers.tusd.rule=Host(`tusd.${STACK_DOMAIN}`)
      - traefik.http.routers.tusd_secure.rule=Host(`tusd.${STACK_DOMAIN}`) && Method(`GET`, `HEAD`, `OPTIONS`, `POST`, `PUT`, `PATCH`)
      - traefik.http.routers.tusd_secure.tls.options=mintls13@file #DARGSTACK-REMOVE
      - traefik.http.services.tusd.loadbalancer.server.port=1080
    environment:
      AWS_REGION: ${TUSD_AWS_REGION}
    image: tusproject/tusd:v1.5.1@sha256:b0f7dcea4d906656517e80e56be5e08ba392538b582c2920016cd507505bf2f9
    secrets:
      - source: tusd_aws
        target: /home/tusd/.aws/credentials
version: "3.7"
volumes:
  portainer_data:
  # The container manager's data.
    {}
  postgres_data:
  # The database's data.
    {}
  rabbitmq_data:
  # The message queue's data.
    {}
