# maev.si
# https://maev.si/
# maevsi
# https://github.com/maevsi/maevsi/
---
configs:
  postgraphile_rc:
  # The GraphQL API's configuration file.
    file: ../production/configurations/postgraphile/.postgraphilerc.js
secrets:
  maevsi_sqitch-target:
  # The database change management application's database connection string.
    file: ./secrets/maevsi/sqitch-target.secret
  pg-amqp-bridge_amqp-uri:
  # The database-to-AMQP bridge's AMQP URI.
    file: ./secrets/pg-amqp-bridge/amqp-uri.secret
  pg-amqp-bridge_postgresql-uri:
  # The database-to-AMQP bridge's database URI.
    file: ./secrets/pg-amqp-bridge/postgresql-uri.secret
  portainer_admin-password:
  # The container manager's admin password.
    file: ./secrets/portainer/admin-password.secret
  postgraphile_connection:
  # The GraphQL API's database URI.
    file: ./secrets/postgraphile/connection.secret
  postgraphile_jwt-secret:
  # The GraphQL API's JWT secret.
    file: ./secrets/postgraphile/jwt-secret.secret
  postgraphile_owner-connection:
  # The GraphQL API's database owner URI.
    file: ./secrets/postgraphile/owner-connection.secret
  postgres_db:
  # The database's name.
    file: ./secrets/postgres/db.secret
  postgres_password:
  # The database's password.
    file: ./secrets/postgres/password.secret
  postgres_role_maevsi-postgraphile_password:
  # The `maevsi_postgraphile` database role's password.
    file: ./secrets/postgres/role_maevsi-postgraphile_password.secret
  postgres_role_maevsi-stomper_password:
  # The `stomper` database role's password.
    file: ./secrets/postgres/role_maevsi-stomper_password.secret
  postgres_role_maevsi-tusd_password:
  # The `tusd` database role's password.
    file: ./secrets/postgres/role_maevsi-tusd_password.secret
  postgres_user:
  # The database's default user.
    file: ./secrets/postgres/user.secret
  rabbitmq_password:
  # The message queue's login password.
    file: ./secrets/rabbitmq/password.secret
  rabbitmq_user:
  # The message queue's login username.
    file: ./secrets/rabbitmq/user.secret
  stomper_nodemailer-transporter:
  # The email service's SMTP configuration.
    file: ./secrets/stomper/nodemailer-transporter.secret
  tusd_aws:
  # The upload service's s3 credentials file.
    file: ./secrets/tusd/aws.secret
services:
  adminer:
  # You can access the database's frontend at [adminer.maevsi.test](https://adminer.maevsi.test/).
  # This information is required for login:
  #
  # |          |                     |
  # | -------- | ------------------- |
  # | System   | PostgreSQL          |
  # | Server   | postgres            |
  # | Username | [postgres_user]     |
  # | Password | [postgres_password] |
  # | Database | [postgres_db]       |
  #
  # Values in square brackets are [Docker secrets](https://docs.docker.com/engine/swarm/secrets/).
    deploy:
      labels:
      - traefik.enable=true
      - traefik.http.routers.adminer.middlewares=redirectscheme
      - traefik.http.routers.adminer.rule=Host(`adminer.${STACK_DOMAIN}`)
      - traefik.http.routers.adminer_secure.rule=Host(`adminer.${STACK_DOMAIN}`)
      - traefik.http.routers.adminer_secure.tls.options=mintls13@file #DARGSTACK-REMOVE
      - traefik.http.services.adminer.loadbalancer.server.port=8080
    image: adminer:4.7.8-standalone@sha256:0292136ba21b59512177dbec8c13656ed528a9af0353b37b585696a8dfe32007
    volumes:
    - ../production/configurations/adminer/adminer.css:/var/www/html/adminer.css:ro
  maevsi:
  # You can access the main project at [maevsi.test](https://maevsi.test/).
    deploy:
      labels:
      - traefik.enable=true
      - traefik.http.routers.maevsi.middlewares=redirectscheme,redirectregex_alpha
      - traefik.http.routers.maevsi.rule=Host(`${STACK_DOMAIN}`, `alpha.${STACK_DOMAIN}`, `www.${STACK_DOMAIN}`)
      - traefik.http.routers.maevsi_secure.middlewares=redirectregex_alpha
      - traefik.http.routers.maevsi_secure.rule=Host(`${STACK_DOMAIN}`, `alpha.${STACK_DOMAIN}`, `www.${STACK_DOMAIN}`)
      - traefik.http.routers.maevsi_secure.tls.options=mintls13@file #DARGSTACK-REMOVE
      - traefik.http.services.maevsi.loadbalancer.server.port=3000
    environment:
      CONSOLA_LEVEL: 4 # debug
      GOOGLE_ADSENSE_ID: ${GOOGLE_ADSENSE_ID}
      GOOGLE_ANALYTICS_DOMAIN: ${GOOGLE_ANALYTICS_DOMAIN}
      GOOGLE_ANALYTICS_ID: ${GOOGLE_ANALYTICS_ID}
      NUXT_ENV_STACK_DOMAIN: ${STACK_DOMAIN} # Must be prefixed by "NUXT_ENV_" (https://nuxtjs.org/api/configuration-env/#automatic-injection-of-environment-variables)
    image: maevsi/maevsi:dev
    secrets:
    - maevsi_sqitch-target
    - postgraphile_jwt-secret
    - postgres_db
    - postgres_role_maevsi-postgraphile_password
    - postgres_role_maevsi-stomper_password
    - postgres_role_maevsi-tusd_password
    user: node:node
    volumes:
    - ../../../maevsi/nuxt/:/srv/app/
    - ../../../maevsi/sqitch/:/srv/sqitch/
  pg-amqp-bridge:
  # You cannot access the database-to-AMQP bridge directly.
    environment:
      AMQP_URI_FILE: /run/secrets/pg-amqp-bridge_amqp-uri
      BRIDGE_CHANNELS: account_password_reset_request:account_password_reset_request,account_register:account_register,invitation:invitation
      DELIVERY_MODE: PERSISTENT
      POSTGRESQL_URI_FILE: /run/secrets/pg-amqp-bridge_postgresql-uri
      RUST_LOG: info
    image: subzerocloud/pg-amqp-bridge:0.0.7@sha256:300f15c12e0b7f570872073c14f9940f64ffb79ca20ba434fff64154d51aefe7
    secrets:
    - pg-amqp-bridge_amqp-uri
    - pg-amqp-bridge_postgresql-uri
  portainer:
  # You can access the container manager's frontend at [portainer.maevsi.test](https://portainer.maevsi.test/).
    command: -H tcp://tasks.portainer-agent:9001 --tlsskipverify --admin-password-file '/run/secrets/portainer_admin-password'
    deploy:
      labels:
      - traefik.enable=true
      - traefik.http.routers.portainer.middlewares=redirectscheme
      - traefik.http.routers.portainer.rule=Host(`portainer.${STACK_DOMAIN}`)
      - traefik.http.routers.portainer_secure.rule=Host(`portainer.${STACK_DOMAIN}`)
      - traefik.http.routers.portainer_secure.tls.options=mintls13@file #DARGSTACK-REMOVE
      - traefik.http.services.portainer.loadbalancer.server.port=9000
      mode: replicated
      placement:
        constraints:
        - node.role == manager
      replicas: 1
    image: portainer/portainer:1.24.1@sha256:02c51e3116cddbeff35da5a968ce909fcb07ff1b9688faa2eaaa2c237e9f7548
    secrets:
    - portainer_admin-password
    volumes:
    - portainer_data:/data
  portainer-agent:
  # You cannot access the container manager's agent directly.
    deploy:
      mode: global
      placement:
        constraints:
        - node.platform.os == linux
    environment:
      AGENT_CLUSTER_ADDR: tasks.portainer-agent
    image: portainer/agent:1.6.1@sha256:390289880d65315bf348ccf1b0eb514f83a5e1dab399e8365b69740c42f8eeaa
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock
    - /var/lib/docker/volumes:/var/lib/docker/volumes
  postgraphile:
  # You can access the GraphQL API for the PostgreSQL database at [postgraphile.maevsi.test](https://postgraphile.maevsi.test/).
    configs:
      - source: postgraphile_rc
        target: /postgraphile/.postgraphilerc.js
    deploy:
      labels:
      - traefik.enable=true
      - traefik.http.routers.postgraphile.middlewares=redirectscheme
      - traefik.http.routers.postgraphile.rule=Host(`postgraphile.${STACK_DOMAIN}`)
      - traefik.http.routers.postgraphile_secure.middlewares=header_cors
      - traefik.http.routers.postgraphile_secure.rule=Host(`postgraphile.${STACK_DOMAIN}`)
      - traefik.http.routers.postgraphile_secure.tls.options=mintls13@file #DARGSTACK-REMOVE
      - traefik.http.services.postgraphile.loadbalancer.server.port=5000
    image: graphile/postgraphile:v4.10.0@sha256:decf3ea81b43f062238d8cde4be735eafc762c4cfd21fbff307f5170a28959c9
    secrets:
    - postgraphile_connection
    - postgraphile_jwt-secret
    - postgraphile_owner-connection
  postgres:
  # You can access the database via `adminer`.
    command: -c maevsi.jwt_expiry_duration='1 month'
    environment:
      POSTGRES_DB_FILE: /run/secrets/postgres_db
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_USER_FILE: /run/secrets/postgres_user
    image: postgres:12.5-alpine@sha256:ff96c87ca0040cee0decb8d1f4137eb62498ab060cadbb6b3e51f5193be552c7
    secrets:
    - postgres_db
    - postgres_password
    - postgres_user
    sysctls:
      - net.ipv4.tcp_keepalive_time=600 # Prevent Docker Swarm from killing pg-amqp-bridge connections (https://github.com/moby/moby/issues/31208)
    volumes:
    - /mnt/dev/postgresql/:/var/run/postgresql/ #DARGSTACK-REMOVE
    - postgres_data:/var/lib/postgresql/data
  rabbitmq:
  # You can access the message queue at [rabbitmq.maevsi.test](https://rabbitmq.maevsi.test/).
    command: /parallel_commands 'rabbitmq-server' 'rabbitmqctl --timeout 300 await_startup && rabbitmqctl import_definitions /definitions.json'
    deploy:
      labels:
      - traefik.enable=true
      - traefik.http.routers.rabbitmq.middlewares=redirectscheme
      - traefik.http.routers.rabbitmq.rule=Host(`rabbitmq.${STACK_DOMAIN}`)
      - traefik.http.routers.rabbitmq_secure.rule=Host(`rabbitmq.${STACK_DOMAIN}`)
      - traefik.http.routers.rabbitmq_secure.tls.options=mintls13@file #DARGSTACK-REMOVE
      - traefik.http.services.rabbitmq.loadbalancer.server.port=15672
    entrypoint: /entrypoint.sh
    environment:
      RABBITMQ_DEFAULT_PASS_FILE: /run/secrets/rabbitmq_password
      RABBITMQ_DEFAULT_USER_FILE: /run/secrets/rabbitmq_user
    image: rabbitmq:3.8.10-management-alpine@sha256:48597fbd4b829538f7e78f85d607c1aafed818576ee7e80887beb5ad8203ae4f
    secrets:
    - rabbitmq_password
    - rabbitmq_user
    volumes:
    - ../production/configurations/rabbitmq/definitions.json:/etc/rabbitmq/definitions.json
    - ../production/configurations/rabbitmq/enabled_plugins:/etc/rabbitmq/enabled_plugins
    - ../production/configurations/rabbitmq/entrypoint.sh:/entrypoint.sh
    - ../production/configurations/rabbitmq/parallel_commands:/parallel_commands
    - rabbitmq_data:/var/lib/rabbitmq
  stomper:
  # You cannot access the email service directly.
    deploy:
      labels:
      - traefik.enable=true
      - traefik.http.routers.stomper.middlewares=redirectscheme
      - traefik.http.routers.stomper.rule=Host(`stomper.${STACK_DOMAIN}`)
      - traefik.http.routers.stomper_secure.rule=Host(`stomper.${STACK_DOMAIN}`)
      - traefik.http.routers.stomper_secure.tls.options=mintls13@file #DARGSTACK-REMOVE
      - traefik.http.services.stomper.loadbalancer.server.port=3000
    environment:
      RABBITMQ_PASS_FILE: /run/secrets/rabbitmq_password
      RABBITMQ_USER_FILE: /run/secrets/rabbitmq_user
      STACK_DOMAIN: ${STACK_DOMAIN}
    image: maevsi/stomper:dev
    secrets:
    - rabbitmq_password
    - rabbitmq_user
    - postgres_db
    - postgres_role_maevsi-stomper_password
    - stomper_nodemailer-transporter
    volumes:
    - ../../../stomper/:/srv/app/
  traefik:
  # You can access the reverse proxy's dashboard at [traefik.maevsi.test](https://traefik.maevsi.test/).
    command:
    - --api=true
    - --entryPoints.web.address=:80
    - --entryPoints.web-secure.address=:443
    - --pilot.token=${TRAEFIK_PILOT_TOKEN}
    - --providers.docker=true
    - --providers.docker.endpoint=unix:///var/run/docker.sock
    - --providers.docker.exposedByDefault=false
    - --providers.docker.swarmMode=true
    - --providers.file.filename=/dynamic.yml #DARGSTACK-REMOVE
    - --providers.file.watch=true #DARGSTACK-REMOVE
    - --log.level=DEBUG #DARGSTACK-REMOVE
    deploy:
      labels:
      - traefik.enable=true
      - traefik.http.middlewares.header_cors.headers.accessControlAllowHeaders=authorization,content-type
      - traefik.http.middlewares.header_cors.headers.accessControlAllowOrigin=*
      - traefik.http.middlewares.redirectregex_alpha.redirectregex.regex=^https?:\/\/(www\.)?${STACK_DOMAIN}\/(.*)
      - traefik.http.middlewares.redirectregex_alpha.redirectregex.replacement=https://alpha.${STACK_DOMAIN}/$${2}
      - traefik.http.middlewares.redirectscheme.redirectscheme.scheme=https
      - traefik.http.routers.traefik.middlewares=redirectscheme
      - traefik.http.routers.traefik.rule=Host(`traefik.${STACK_DOMAIN}`)
      - traefik.http.routers.traefik_secure.rule=Host(`traefik.${STACK_DOMAIN}`)
      - traefik.http.routers.traefik_secure.service=api@internal
      - traefik.http.routers.traefik_secure.tls.options=mintls13@file #DARGSTACK-REMOVE
      - traefik.http.services.traefik.loadbalancer.server.port=8080
      mode: global
      placement:
        constraints:
        - node.role == manager
    image: traefik:2.4.0@sha256:04bd8b3e8f8d95be00908b15251a8dfb24e3a119cc6a64d676f3663ad9339dc4
    ports:
    - mode: host
      protocol: tcp
      published: 80
      target: 80
    - mode: host
      protocol: tcp
      published: 443
      target: 443
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock
    - ./certificates/:/etc/traefik/acme/
    - ./configurations/traefik/dynamic.yml:/dynamic.yml:ro #DARGSTACK-REMOVE
  tusd:
  # You can access the upload service at [tusd.maevsi.test](https://tusd.maevsi.test/).
    command: -behind-proxy --hooks-enabled-events pre-create,post-finish,post-terminate --hooks-http http://maevsi:3000/tusd -max-size ${TUSD_MAX_SIZE} -s3-bucket ${TUSD_S3_BUCKET} -s3-endpoint ${TUSD_S3_ENDPOINT}
    deploy:
      labels:
      - traefik.enable=true
      - traefik.http.routers.tusd.middlewares=redirectscheme
      - traefik.http.routers.tusd.rule=Host(`tusd.${STACK_DOMAIN}`)
      - traefik.http.routers.tusd_secure.rule=Host(`tusd.${STACK_DOMAIN}`) && Method(`GET`, `HEAD`, `OPTIONS`, `POST`, `PUT`, `PATCH`)
      - traefik.http.routers.tusd_secure.tls.options=mintls13@file #DARGSTACK-REMOVE
      - traefik.http.services.tusd.loadbalancer.server.port=1080
    environment:
      AWS_REGION: ${TUSD_AWS_REGION}
    image: tusproject/tusd:v1.5.0@sha256:17d45f6360fe113baf199c9e308c29232a7b82c47fb13137ba47b7461fadc745
    secrets:
      - source: tusd_aws
        target: /home/tusd/.aws/credentials
version: "3.7"
volumes:
  portainer_data:
  # The container manager's data.
    {}
  postgres_data:
  # The database's data.
    {}
  rabbitmq_data:
  # The message queue's data.
    {}
